$date
	Wed Oct  3 01:47:51 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ALU $end
$var wire 1 ! carryout $end
$var wire 3 " command [2:0] $end
$var wire 32 # operandA [31:0] $end
$var wire 32 $ operandB [31:0] $end
$var wire 1 % overflow $end
$var wire 32 & result [31:0] $end
$var wire 1 ' zero $end
$upscope $end
$scope module ALU_last $end
$var wire 1 ( A $end
$var wire 1 ) B $end
$var wire 3 * S [0:2] $end
$var wire 1 + carryin $end
$var wire 1 , overflow $end
$var wire 1 - out $end
$var wire 1 . modB $end
$var wire 1 / carryout $end
$var wire 1 0 as $end
$var wire 1 1 SLT $end
$var wire 8 2 I [0:7] $end
$scope module anush $end
$var wire 1 ) A $end
$var wire 1 3 B $end
$var wire 1 . out $end
$upscope $end
$scope module combo $end
$var wire 1 ( A $end
$var wire 1 ) B $end
$var wire 1 4 out $end
$upscope $end
$scope module elonMux $end
$var wire 8 5 I [7:0] $end
$var wire 3 6 S [2:0] $end
$var reg 1 - out $end
$upscope $end
$scope module houstonWeHaveAProblem $end
$var wire 1 + A $end
$var wire 1 , out $end
$var wire 1 / B $end
$upscope $end
$scope module iAmYourFather $end
$var wire 1 , A $end
$var wire 1 1 out $end
$var wire 1 0 B $end
$upscope $end
$scope module lauren $end
$var wire 1 ( A $end
$var wire 1 ) B $end
$var wire 1 7 out $end
$upscope $end
$scope module nalgene $end
$var wire 1 ( A $end
$var wire 1 ) B $end
$var wire 1 8 out $end
$upscope $end
$scope module nombo $end
$var wire 1 ( A $end
$var wire 1 ) B $end
$var wire 1 9 out $end
$upscope $end
$scope module purpoise $end
$var wire 1 ( A $end
$var wire 1 ) B $end
$var wire 1 : out $end
$upscope $end
$scope module will $end
$var wire 1 ( A $end
$var wire 1 . B $end
$var wire 1 + carryin $end
$var wire 1 / carryout $end
$var wire 1 ; out1 $end
$var wire 1 < out2 $end
$var wire 1 = out3 $end
$var wire 1 0 sum $end
$upscope $end
$upscope $end
$scope module add_sub_last $end
$var wire 1 > A $end
$var wire 1 ? B $end
$var wire 1 @ carryin $end
$var wire 1 A carryout $end
$var wire 1 B out1 $end
$var wire 1 C out2 $end
$var wire 1 D out3 $end
$var wire 1 E overflow $end
$var wire 1 F sum $end
$upscope $end
$scope module testAlu $end
$var wire 1 G out $end
$var wire 1 H carryout $end
$var reg 1 I A $end
$var reg 1 J B $end
$var reg 3 K S [2:0] $end
$var reg 1 L carryin $end
$scope module alu $end
$var wire 1 I A $end
$var wire 1 J B $end
$var wire 3 M S [0:2] $end
$var wire 1 L carryin $end
$var wire 1 G out $end
$var wire 1 N modB $end
$var wire 1 H carryout $end
$var wire 1 O as $end
$var wire 8 P I [0:7] $end
$scope module anush $end
$var wire 1 J A $end
$var wire 1 Q B $end
$var wire 1 N out $end
$upscope $end
$scope module combo $end
$var wire 1 I A $end
$var wire 1 J B $end
$var wire 1 R out $end
$upscope $end
$scope module elonMux $end
$var wire 8 S I [7:0] $end
$var wire 3 T S [2:0] $end
$var reg 1 G out $end
$upscope $end
$scope module lauren $end
$var wire 1 I A $end
$var wire 1 J B $end
$var wire 1 U out $end
$upscope $end
$scope module nalgene $end
$var wire 1 I A $end
$var wire 1 J B $end
$var wire 1 V out $end
$upscope $end
$scope module nombo $end
$var wire 1 I A $end
$var wire 1 J B $end
$var wire 1 W out $end
$upscope $end
$scope module purpoise $end
$var wire 1 I A $end
$var wire 1 J B $end
$var wire 1 X out $end
$upscope $end
$scope module will $end
$var wire 1 I A $end
$var wire 1 N B $end
$var wire 1 L carryin $end
$var wire 1 H carryout $end
$var wire 1 Y out1 $end
$var wire 1 Z out2 $end
$var wire 1 [ out3 $end
$var wire 1 O sum $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x[
xZ
xY
xX
xW
xV
xU
b11 T
bx0xxxx S
xR
0Q
bx0xxxx P
xO
xN
b11 M
0L
b11 K
0J
1I
xH
xG
xF
xE
xD
xC
xB
xA
z@
z?
z>
x=
x<
x;
x:
x9
x8
x7
bz 6
bx0xxxx 5
x4
z3
bx0xxxx 2
x1
x0
x/
x.
x-
x,
z+
bz *
z)
z(
z'
bz &
z%
bz $
bz #
bz "
z!
$end
#10000
0N
bx10xxxx P
bx10xxxx S
1U
#20000
1W
bx10x10x P
bx10x10x S
0V
#30000
0Z
1X
bx100101 P
bx100101 S
0R
#40000
1Y
0[
#70000
b11100101 P
b11100101 S
1O
0H
#100000000
